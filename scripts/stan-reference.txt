# Built-In Functions

## Void Functions

void increment log prob(T lp)
    Add lp (or elements of lp if T is a container type) to the total log probability
    accumulator returned by the log probability function defined by a Stan model.

### Print

void print(T1 x1,..., TN xN)
    Print the values denoted by the arguments x1 through xN on the standard output
    stream. There are no spaces between items in the print, but a line feed (LF; Unicode
    U+000A; C++ literal ’\n’) is inserted at the end of the printed line. The types T1
    through TN can be any of Stan’s built-in numerical types or double quoted strings of
    ASCII characters.

## Integer-Valued Basic Functions

### Integer-Valued Arithmetic Operators

int operator+(int x, int y)
    The sum of the addends x and y

int operator-(int x, int y)
    The difference between the minuend x and subtrahend y

int operator*(int x, int y)
    The product of the factors x and y

int operator/(int x, int y)
    The integer quotient of the dividend x and divisor y

Unary Prefix Operators

int operator-(int x)
    The negation of the subtrahend x

int operator+(int x)
    This is a no-op.

### Absolute Functions

int abs(int x)
    The absolute value of x

int int step(int x)
    1 if x is strictly greater than 0, and 0 otherwise

int int step(real x)
    1 if x is strictly greater than 0, and 0 otherwise

### Bound Functions

int min(int x, int y)
    The minimum of x and y

int max(int x, int y)
    The maximum of x and y

## Real-Valued Basic Functions

### Mathematical Constants

real pi()
    π, the ratio of a circle’s circumference to its diameter

real e()
    e, the base of the natural logarithm

real sqrt2()
    The square root of 2
    
real log2()
    The natural logarithm of 2
    
real log10()
    The natural logarithm of 10

### Special Values

real not a number()
    Not-a-number, a special non-finite real value returned to signal an error

real positive infinity()
    Positive infinity, a special non-finite real value larger than all finite numbers

real negative infinity()
    Negative infinity, a special non-finite real value smaller than all finite numbers

real machine precision()
    The smallest number x such that (x + 1) = 1 in floating-point arithmetic on the
    current hardware platform



### Logical Functions

int operator<(int x, int y)
    1 if x is less than y and 0 otherwise

int operator<=(int x, int y)
    1 if x is less than or equal to y and 0 otherwise

int operator>(int x, int y)
    1 if x is greater than y and 0 otherwise

int operator>=(int x, int y)
    1 if x is greater than or equal to y and 0 otherwise

int operator==(int x, int y)
    1 if x is equal to y and 0 otherwise
    
int operator!=(int x, int y)
    1 if x is not equal to y and 0 otherwise
    
int operator<(real x, real y)
    1 if x is less than y and 0 otherwise

int operator<=(real x, real y)
    1 if x is less than or equal to y and 0 otherwise

int operator>(real x, real y)
    1 if x is greater than y and 0 otherwise

int operator>=(real x, real y)
    1 if x is greater than or equal to y and 0 otherwise

int operator==(real x, real y)
    1 if x is equal to y and 0 otherwise

int operator!=(real x, real y)
    1 if x is not equal to y and 0 otherwise

int operator!(int x)
    1 if x is zero and 0 otherwise

int operator&&(int x, int y)
    1 if x is unequal to 0 and y is unequal to 0

int operator||(int x, int y)
    1 if x is unequal to 0 or y is unequal to 0

int operator!(real x)
    1 if x is zero and 0 otherwise

int operator&&(real x, real y)
    1 if x is unequal to 0 and y is unequal to 0
    
int operator||(real x, real y)
    1 if x is unequal to 0 or y is unequal to 0

real if else(int cond, real x, real y)
    x if cond is non-zero, and y otherwise; unlike the ternary operator in C++, Stan’s
    if else function always evaluates both arguments x and y
    
real step(real x)
    1 if x is positive and 0 otherwise; equivalent to x > 0.0
    

### Real-Valued Arithmetic Operators

Binary Infix Operators

real operator+(real x, real y)
    The sum of the addends x and y
    
real operator-(real x, real y)
    The difference between the minuend x and subtrahend y
    
real operator*(real x, real y)
    The product of the factors x and y
    
real operator/(real x, real y)
    The quotient of the dividend x and divisor y

Unary Prefix Operators

real operator-(real x)
    The negation of the subtrahend x
    
real operator+(real x)
    This is a no-op.

### Step-like Functions

Absolute Value Functions

real abs(real x)
    The absolute value of x. This function is deprecated and will be removed in the
    future; please use fabs instead.
    
real fabs(real x)
    The absolute value of x
    
real fdim(real x, real y)
    The positive difference between x and y, which is x - y if x is greater than y and 0
    otherwise


Bounds Functions

real fmin(real x, real y)
    The minimum of x and y
    
real fmax(real x, real y)
    The maximum of x and y

Arithmetic Functions

real fmod(real x, real y)
    The real value remainder after dividing x by y

Rounding Functions

real floor(real x)
    The floor of x, which is the largest integer less than or equal to x, converted to a real
    value
    
real ceil(real x)
    The ceiling of x, which is the smallest integer greater than or equal to x, converted
    to a real value
    
real round(real x)
    The nearest integer to x, converted to a real value
    
real trunc(real x)
    The integer nearest to but no larger in magnitude than x, converted to a double
    value

### Power and Logarithm Functions

real sqrt(real x)
    The square root of x

real cbrt(real x)
    The cube root of x
    
real square(real x)
    The square of x
    
real exp(real x)
    The natural exponential of x
    
real exp2(real x)
    The base-2 exponential of x
    
real log(real x)
    The natural logarithm of x
    
real log2(real x)
    The base-2 logarithm of x
    
real log10(real x)
    The base-10 logarithm of x
    
real pow(real x, real y)
    x raised to the power of y

real inv(real x)
    The inverse of x

real inv sqrt(real x)
    The inverse of the square root of x

real inv square(real x)
    The inverse of the square of x

### Trigonometric Functions

real hypot(real x, real y)
    The length of the hypotenuse of a right triangle with sides of length x and y

real cos(real x)
    The cosine of the angle x (in radians)

real sin(real x)
    The sine of the angle x (in radians)

real tan(real x)
    The tangent of the angle x (in radians)

real acos(real x)
    The principal arc (inverse) cosine (in radians) of x

real asin(real x)
    The principal arc (inverse) sine (in radians) of x

real atan(real x)
    The principal arc (inverse) tangent (in radians) of x
    
real atan2(real x, real y)
    The principal arc (inverse) tangent (in radians) of x divided by y

### Hyperbolic Trigonometric Functions

real cosh(real x)
    The hyperbolic cosine of x (in radians)

real sinh(real x)
    The hyperbolic sine of x (in radians)

real tanh(real x)
    The hyperbolic tangent of x (in radians)

real acosh(real x)
    The inverse hyperbolic cosine (in radians) of x

real asinh(real x)
    The inverse hyperbolic sine (in radians) of x

real atanh(real x)
    The inverse hyperbolic tangent (in radians) of x

### Link Functions

real logit(real x)
    The log odds, or logit, function applied to x, defined by logit(x) = log (x / 1−x).

real inv_logit(real y)
    The logistic sigmoid function applied to y, defined by logit−1 (y) = 1 / 1+exp(−y) .
                                                                           

real inv_cloglog(real y)
    The inverse of the complementary log-log function applied to y, defined by
    cloglog−1 (y) = 1 − exp (− exp(y)) .
    

### Probability-Related Functions

real erf(real x)
    The error function of x
    
real erfc(real x)
    The complementary error function of x
    
real Phi(real x)
    The cumulative unit normal density function of x; Phi(x) will underflow to 0 for
    x below -37.5 and overflow to 1 for x above 8.25; derivatives will underflow to 0
    below -27.5 and overflow to 1 above 27.5.
    
real Phi_approx(real x)
    Fast approximation of the cumulative unit normal density function of x, defined by Φapprox (x) = logit−1 (0.07056 x3 + 1.5976 x). This approximation has a maximum absolute error of 0.00014 and may be used instead of Phi for probit regression.
	
real binary_log_loss(int y, real y hat)
    The log loss of predicting probability y hat for binary outcome y ;
    The log loss function for predicting yˆ ∈ [0, 1] for boolean outcome y ∈ {0, 1} is
    defined by binary log loss(y, yˆ) = y log yˆ + (1 − y) log(1 − yˆ).

real owens_t(real h, real a)
    The Owen’s T function for the probability of the event X > a and 0 < Y < aX

### Combinatorial Functions

real lbeta(real alpha, real beta)
    The natural logarithm of the beta function applied to alpha and beta. 


real tgamma(real x)
    The gamma function applied to x. 


real lgamma(real x)
    The natural logarithm of the gamma function applied to x
    
real digamma(real x)
    The digamma function applied to x. The digamma function is the derivative of
    the natural logarithm of the Gamma function. The function is defined for positive
    numbers and non-integral negative numbers.
    
real trigamma(real x)
    The trigamma function applied to x. The trigamma function is the second derivative
    of the natural logarithm of the Gamma function.
    
real lmgamma(int n, real x)
    The natural logarithm of the multinomial gamma function with n dimensions
    applied to x.

real gamma_p(real a, real z)
    The normalised lower incomplete gamma function of a and z defined for positive a
    and nonnegative z.

real gamma_q(real a, real z)
    The normalised upper incomplete gamma function of a and z defined for positive a
    and nonnegative z.

real binomial_coefficient_log(real x, real y)
    The natural logarithm of the binomial coefficient of x and y. For non-negative
    integer inputs, this is pronounced “x choose y,” written as xy.

real bessel_first_kind(int v, real z)
    The Bessel function of the first kind with order v applied to z defined for all z and
    v.

real bessel_second_kind(int v, real z)
    The Bessel function of the second kind with order v applied to z defined for positive
    z and v.

real modified_bessel_first_kind(int v, real z)
    The modified Bessel function of the first kind with order v applied to z defined for
    all z and v.


real modified bessel second kind(int v, real z)
    The modified Bessel function of the second kind with order v applied to z defined
    for positive z and v.

real falling factorial(real x, real n)
    The falling factorial of x with power n defined for positive x and real n.


real log falling factorial(real x, real n)
    The log of the falling factorial of x with power n defined for positive x and real n.

real rising factorial(real x, real n)
    The rising factorial of x with power n defined for positive x and real n.

real log rising factorial(real x, real n)
    The log of the rising factorial of x with power n defined for positive x and real n.

### Composed Functions

real expm1(real x)
    The natural exponential of x minus 1
    
real fma(real x, real y, real z)
    z plus the result of x multiplied by y

real multiply log(real x, real y)
    The product of x and the natural logarithm of y ; if both x and y are 0, the return
    value is 0
    
real log1p(real x)
    The natural logarithm of 1 plus x
    
real log1m(real x)
    The natural logarithm of 1 minus x
    
real log1p exp(real x)
    The natural logarithm of one plus the natural exponentiation of x
    
real log1m exp(real x)
    The natural logarithm of one minus the natural exponentiation of x.

real log diff exp(real x, real y)
    The natural logarithm of the difference of the natural exponentiation of x and the
    natural exponentiation of y
    
real log sum exp(real x, real y)
    The natural logarithm of the sum of the natural exponentiation of x and the natural
    exponentiation of y

real log inv logit(real x)
    The natural logarithm of the inverse logit function of x

real log1m inv logit(real x)
    The natural logarithm of 1 minus the inverse logit function of x

## Array Operations

### Reductions

Minimum and Maximum

real min(real x[])
    The minimum value in x, or +∞ if x is empty

int min(int x[])
    The minimum value in x, or raise exception if x is empty

real max(real x[])
    The maximum value in x, or −∞ if x is empty

int max(int x[])
    The maximum value in x, or raise exception if x is empty

Sum, Product, and Log Sum of Exp

int sum(int x[])
    The sum of the elements in x, or 0 if x is empty.

real sum(real x[])
    The sum of the elements in x, or 0 if x is empty.
    
real prod(real x[])
    The product of the elements in x, or 1 if x is empty.

real prod(int x[])
    The product of the elements in x, or 1 if x is empty.
    
real log sum exp(real x[])
    The natural logarithm of the sum of the exponentials of the elements in x

Moments

real mean(real x[])
    The sample mean of the elements in x

real variance(real x[])
    The sample variance of the elements in x

real sd(real x[])
    The sample standard deviation of elements in x

Distance and Squared Distance

real distance(vector x, vector y)
    The Euclidean distance between x and y.

real distance(vector x, row_vector y)
    The Euclidean distance between x and y

real distance(row_vector x, vector y)
    The Euclidean distance between x and y

real distance(row_vector x, row_vector y)
    The Euclidean distance between x and y

real squared distance(vector x, vector y[])
    The Euclidean distance between x and y.

real squared distance(vector x, row_vector y[])
    The Euclidean distance between x and y

real squared distance(row_vector x, vector y[])
    The Euclidean distance between x and y

real squared distance(row_vector x, row_vector y[])
    The Euclidean distance between x and y

### Array Size and Dimension Function

int[] dims(T x)
    Returns an integer array containing the dimensions of x; the type of the argument T
    can be any Stan type with up to 8 array dimensions.

int size(T[] x)
    Returns the number of elements in the array x; the type of the array T can be
    anything type.

### Array Broadcasting

T[] rep array(T x, int n)
    Return the n array with every entry assigned to x.

T[ , ] rep array(T x, int m, int n)
      Return the m by n array with every entry assigned to x.

T[ , , ] rep array(T x, int k, int m, int n)
      Return the k by m by n array with every entry assigned to x.

### Other functions

real[] sort_asc(real[] v)
    Sort the elements of v in ascending order

int[] sort_asc(int[] v)
    Sort the elements of v in ascending order

real[] sort_desc(real[] v)
    Sort the elements of v in descending order

int[] sort_desc(int[] v)
    Sort the elements of v in descending order

int[] sort_indices_asc(real[] v)
      Return an array of indices between 1 and the size of v, sorted to index v in
      ascending order.

int[] sort_indices_asc(int[] v)
      Return an array of indices between 1 and the size of v, sorted to index v in
      ascending order.

int[] sort_indices_desc(real[] v)
    Return an array of indices between 1 and the size of v, sorted to index v in
    descending order.

int[] sort_indices_desc(int[] v)
    Return an array of indices between 1 and the size of v, sorted to index v in
    descending order.

int rank(real[] v, int s)
    Number of components of v less than v[s]

int rank(int[] v, int s)
    Number of components of v less than v[s]

## Matrix Operations


### Integer-Valued Matrix Size Functions

int rows(vector x)
    The number of rows in the vector x

int rows(row_vector x)
    The number of rows in the row vector x, namely 1

int rows(matrix x)
    The number of rows in the matrix x

int cols(vector x)
    The number of columns in the vector x, namely 1

int cols(row_vector x)
    The number of columns in the row vector x

int cols(matrix x)
    The number of columns in the matrix x

### Matrix Arithmetic Operators


Negation Prefix Operators

vector operator-(vector x)
    The negation of the vector x
    
row_vector operator-(row_vector x)
     The negation of the row vector x

matrix operator-(matrix x)
    The negation of the matrix x

Infix Matrix Operators

vector operator+(vector x, vector y)
    The sum of the vectors x and y
    
row_vector operator+(row_vector x, row_vector y)
     The sum of the row vectors x and y
     
matrix operator+(matrix x, matrix y)
    The sum of the matrices x and y

vector operator-(vector x, vector y)
    The difference between the vectors x and y
    
row_vector operator-(row_vector x, row_vector y)
     The difference between the row vectors x and y
     
matrix operator-(matrix x, matrix y)
    The difference between the matrices x and y

vector operator*(real x, vector y)
    The product of the scalar x and vector y
    
row_vector operator*(real x, row_vector y)
     The product of the scalar x and the row vector y
     
matrix operator*(real x, matrix y)
    The product of the scalar x and the matrix y
    
vector operator*(vector x, real y)
    The product of the scalar y and vector x
    
matrix operator*(vector x, row_vector y)
    The product of the vector x and row vector y
    
row_vector operator*(row_vector x, real y)
     The product of the scalar y and row vector x
     
real operator*(row_vector x, vector y)
    The product of the row vector x and vector y
    
row_vector operator*(row_vector x, matrix y)
     The product of the row vector x and matrix y

matrix operator*(matrix x, real y)
    The product of the scalar y and matrix x
    
vector operator*(matrix x, vector y)
    The product of the matrix x and vector y
    
matrix operator*(matrix x, matrix y)
    The product of the matrices x and y

Broadcast Infix Operators

vector operator+(vector x, real y)
    The result of adding y to every entry in the vector x
    
vector operator+(real x, vector y)
    The result of adding x to every entry in the vector y
    
row_vector operator+(row_vector x, real y)
     The result of adding y to every entry in the row vector x
     
row_vector operator+(real x, row_vector y)
     The result of adding x to every entry in the row vector y
     
matrix operator+(matrix x, real y)
    The result of adding y to every entry in the matrix x
    
matrix operator+(real x, matrix y)
    The result of adding x to every entry in the matrix y

vector operator-(vector x, real y)
    The result of subtracting y from every entry in the vector x
    
vector operator-(real x, vector y)
    The result of adding x to every entry in the negation of the vector y
    
row_vector operator-(row_vector x, real y)
     The result of subtracting y from every entry in the row vector x
     
row_vector operator-(real x, row_vector y)
     The result of adding x to every entry in the negation of the row vector y
     
matrix operator-(matrix x, real y)
    The result of subtracting y from every entry in the matrix x

matrix operator-(real x, matrix y)
    The result of adding x to every entry in negation of the matrix y

vector operator/(vector x, real y)
    The result of dividing each entry in the vector x by y
    
row_vector operator/(row_vector x, real y)
     The result of dividing each entry in the row vector x by y
     
matrix operator/(matrix x, real y)
    The result of dividing each entry in the matrix x by y

Elementwise Products

vector operator.*(vector x, vector y)
    The elementwise product of y and x
    
row_vector operator.*(row_vector x, row_vector y)
     The elementwise product of y and x
     
matrix operator.*(matrix x, matrix y)
    The elementwise product of y and x

vector operator./(vector x, vector y)
    The elementwise quotient of y and x
    
row_vector operator./(row_vector x, row_vector y)
     The elementwise quotient of y and x
     
matrix operator./(matrix x, matrix y)
    The elementwise quotient of y and x


Elementwise Logarithms

vector log(vector x)
    The elementwise natural logarithm of x
    
row_vector log(row_vector x)
     The elementwise natural logarithm of x
     
matrix log(matrix x)
    The elementwise natural logarithm of x

vector exp(vector x)
    The elementwise exponential of x
    
row_vector exp(row_vector x)
     The elementwise exponential of x
     
matrix exp(matrix x)
    The elementwise exponential of x

Cumulative Sums

real[] cumulative sum(real[] x)
    The cumulative sum of x
    
vector cumulative sum(vector v)
    The cumulative sum of v
    
row_vector cumulative sum(row_vector rv)
     The cumulative sum of rv

Dot Products

real dot product(vector x, vector y)
    The dot product of x and y
    
real dot product(vector x, row_vector y)
    The dot product of x and y
    
real dot product(row_vector x, vector y)
    The dot product of x and y
    
real dot product(row_vector x, row_vector y)
    The dot product of x and y
    
row_vector columns dot product(vector x, vector y)
     The dot product of the columns of x and y
     
row_vector columns dot product(row_vector x, row_vector y)
     The dot product of the columns of x and y

row_vector columns dot product(matrix x, matrix y)
     The dot product of the columns of x and y
     
vector rows dot product(vector x, vector y)
    The dot product of the rows of x and y
    
vector rows dot product(row_vector x, row_vector y)
    The dot product of the rows of x and y

vector rows dot product(matrix x, matrix y)
    The dot product of the rows of x and y

real dot self(vector x)
    The dot product of the vector x with itself

real dot self(row_vector x)
    The dot product of the row vector x with itself

row_vector columns dot self(vector x)
     The dot product of the columns of x with themselves

row_vector columns dot self(row_vector x)
     The dot product of the columns of x with themselves

row_vector columns dot self(matrix x)
     The dot product of the columns of x with themselves

vector rows dot self(vector x)
    The dot product of the rows of x with themselves

vector rows dot self(row_vector x)
    The dot product of the rows of x with themselves

vector rows dot self(matrix x)
    The dot product of the rows of x with themselves

Specialized Products

matrix tcrossprod(matrix x)
    The product of x postmultiplied by its own transpose, similar to the tcrossprod(x)
    function in R. The result is a symmetric matrix x x .

matrix crossprod(matrix x)
    The product of x premultiplied by its own transpose, similar to the crossprod(x)
    function in R. The result is a symmetric matrix x x.

matrix quad_form(matrix A, matrix B)
    The quadratic form, i.e., B’ * A * B.

real quad_form(matrix A, vector B)
    The quadratic form, i.e., B’ * A * B.

matrix quad_form_diag(matrix m, vector v)
     The quadratic form using the column vector v as a diagonal matrix, i.e.,
     diag_matrix(v) * m * diag_matrix(v).

matrix quad_form_diag(matrix m, row_vector rv)
     The quadratic form using the row vector rv as a diagonal matrix, i.e.,
     diag_matrix(rv) * m * diag_matrix(rv).

matrix quad_form_sym(matrix A, matrix B)
     Similarly to quad_form, gives B’ * A * B, but additionally checks if A is
     symmetric and ensures that the result is also symmetric.

real quad_form_sym(matrix A, vector B)
     Similarly to quad_form, gives B’ * A * B, but additionally checks if A is
     symmetric and ensures that the result is also symmetric.
    
real trace_quad_form(matrix A, matrix B)
    The trace of the quadratic form, i.e., trace(B’ * A * B).

real trace gen quad form(matrix D,matrix A, matrix B)
    The trace of a generalized quadratic form, i.e., trace(D * B’ * A * B).

matrix multiply lower tri self transpose(matrix x)
    The product of the lower triangular portion of x (including the diagonal) times its
    own transpose; that is, if L is a matrix of the same dimensions as x with L(m,n)
    equal to x(m,n) for n ≤ m and L(m,n) equal to 0 if n > m, the result is the
    symmetric matrix L L . This is a specialization of tcrossprod(x) for lower-triangular
    matrices.

matrix diag pre multiply(vector v, matrix m)
    Return the product of the diagonal matrix formed from the vector v and the matrix
    m, i.e., diag matrix(v) * m.

matrix diag pre multiply(row_vector rv, matrix m)
    Return the product of the diagonal matrix formed from the vector rv and the matrix
    m, i.e., diag matrix(rv) * m.

matrix diag post multiply(matrix m, vector v)
    Return the product of the matrix m and the diagonal matrix formed from the vector
    v, i.e., m * diag matrix(v).

matrix diag post multiply(matrix m, row_vector rv)
    Return the product of the matrix m and the diagonal matrix fromed from the the row
    vector rv, i.e., m * diag matrix(rv).


### Reductions

real log sum exp(vector x)
    The natural logarithm of the sum of the exponentials of the elements in x
    
real log sum exp(row_vector x)
    The natural logarithm of the sum of the exponentials of the elements in x

real log sum exp(matrix x)
    The natural logarithm of the sum of the exponentials of the elements in x

Minimum and Maximum

real min(vector x)
    The minimum value in x, or +∞ if x is empty

real min(row_vector x)
    The minimum value in x, or +∞ if x is empty

real min(matrix x)
    The minimum value in x, or +∞ if x is empty

real max(vector x)
    The maximum value in x, or −∞ if x is empty

real max(row_vector x)
    The maximum value in x, or −∞ if x is empty

real max(matrix x)
    The maximum value in x, or −∞ if x is empty

Sums and Products

real sum(vector x)
    The sum of the values in x, or 0 if x is empty

real sum(row_vector x)
    The sum of the values in x, or 0 if x is empty

real sum(matrix x)
    The sum of the values in x, or 0 if x is empty

real prod(vector x)
    The product of the values in x, or 1 if x is empty
    
real prod(row_vector x)
    The product of the values in x, or 1 if x is empty

real prod(matrix x)
    The product of the values in x, or 1 if x is empty

Sample Moments

real mean(vector x)
    The sample mean of the values in x

real mean(row_vector x)
    The sample mean of the values in x

real mean(matrix x)
    The sample mean of the values in x

real variance(vector x)
    The sample variance of the values in x

real variance(row_vector x)
    The sample variance of the values in x

real variance(matrix x)
    The sample variance of the values in x

real sd(vector x)
    The sample standard deviation of the values in x

real sd(row_vector x)
    The sample standard deviation of the values in x

real sd(matrix x)
    The sample standard deviation of the values in x


### Broadcast Functions

vector rep vector(real x, int m)
    Return the size m (column) vector consisting of copies of x.
    
row_vector rep row_vector(real x, int n)
     Return the size n row vector consisting of copies of x.
     
matrix rep matrix(real x, int m, int n)
    Return the m by n matrix consisting of copies of x.
    
matrix rep matrix(vector v, int n)
    Return the m by n matrix consisting of n copies of the (column) vector v of size m.
    
matrix rep matrix(row_vector rv, int m)
    Return the m by n matrix consisting of m copies of the row vector rv of size n.

vector to vector(matrix m)
    Return the matrix m as a vector in column-major order.
    
vector to vector(row_vector m)
    Return the row vector m as a vector in column-major order.

### Slice and Package Functions

Diagonal Matrices

vector diagonal(matrix x)
    The diagonal of the matrix x
    
matrix diag matrix(vector x)
    The diagonal matrix with diagonal x

Columns and Rows

vector col(matrix x, int n)
    The n-th column of matrix x

row_vector row(matrix x, int m)
     The m-th row of matrix x

Block Operations

Matrix Slicing Operations

matrix block(matrix x, int i, int j, int n rows, int n cols)
     Return the submatrix of x that starts at row i and column j and extends n rows
     rows and n cols columns.

vector sub col(matrix x, int i, int j, int n rows)
    Return the sub-column of x that starts at row i and column j and extends n rows
    rows and 1 column.

row_vector sub row(matrix x, int i, int j, int n cols)
     Return the sub-row of x that starts at row i and column j and extends 1 row and
     n cols columns.

Vector and Array Slicing Operations


vector head(vector v, int n)
    Return the vector consisting of the first n elements of v.

row_vector head(row_vector rv, int n)
     Return the row vector consisting of the first n elements of rv.

T[] head(T[] sv, int n)
    Return the standard vector consisting of the first n elements of sv; applies to up to
    three-dimensional arrays containing any type of elements T.


vector tail(vector v, int n)
    Return the vector consisting of the last n elements of v.

row_vector tail(row_vector rv, int n)
     Return the row vector consisting of the last n elements of rv.

T[] tail(T[] sv, int n)
    Return the standard vector consisting of the last n elements of sv; applies to up to
    three-dimensional arrays containing any type of elements T.

vector segment(vector v, int i, int n)
    Return the vector consisting of the n elements of v starting at i; i.e., elements i
    through through i + n - 1.

row_vector segment(row_vector v, int i, int n)
     Return the row vector consisting of the n elements of rv starting at i; i.e., elements
     i through through i + n - 1.

T[] segment(T[] sv, int i, int n)
    Return the standard vector consisting of the n elements of sv starting at i; i.e.,
    elements i through through i + n - 1. Applies to up to three-dimensional arrays
    containing any type of elements T.

Transposition Postfix Operator

matrix operator’(matrix x)
    The transpose of the matrix x, written as x’

row_vector operator’(vector x)
     The transpose of the vector x, written as x’
     
vector operator’(row_vector x)
    The transpose of the vector x, written as x’

### Special Matrix Functions

vector softmax(vector x)
    The softmax of x
    
vector log softmax(vector x)
    The natural logarithm of the softmax of x

### Linear Algebra Functions and Solvers

Matrix Division Infix Operators

row_vector operator/(row_vector b, matrix A)
     The right division of b by A; equivalently b * inverse(A)

matrix operator/(matrix b, matrix A)
    The right division of b by A; equivalently b * inverse(A)

vector operator\(matrix A, vector b)
    The left division of b by A; equivalently inverse(A) * b
    
matrix operator\(matrix A, matrix b)
    The left division of b by A; equivalently inverse(A) * b


Lower-Triangular Matrix-Division Functions

row_vector mdivide right tri low(row_vector b, matrix a)
     The right division of b by tri(a), a lower triangular view of a; equivalently b *
     inverse(tri(a))

matrix mdivide right tri low(matrix b, matrix a)
    The right division of b by tri(a), a lower triangular view of a; equivalently b *
    inverse(tri(a))

vector mdivide left tri low(matrix a, vector b)
    The left division of b by a triangular view of tri(a), a lower triangular view of a;
    equivalently inverse(tri(a)) * b

matrix mdivide left tri low(matrix a, matrix b)
    The left division of b by a triangular view of tri(a), a lower triangular view of a;
    equivalently inverse(tri(a)) * b

Linear Algebra Functions

Trace

real trace(matrix A)
    The trace of A, or 0 if A is empty; A is not required to be diagonal

Determinants

real determinant(matrix A)
    The determinant of A

real log determinant(matrix A)
    The log of the absolute value of the determinant of A

Inverses

matrix inverse(matrix A)
    The inverse of A

matrix inverse spd(matrix A)
    The inverse of A where A is symmetric, positive definite

Eigendecomposition

vector eigenvalues sym(matrix A)
    The vector of eigenvalues of a symmetric matrix A in asscending order

matrix eigenvectors sym(matrix A)
    The matrix with the (column) eigenvectors of symmetric matrix A in the same order
    as returned by the function eigenvalues sym

QR Decomposition

matrix qr_Q(matrix A)
      The orthogonal matrix in the QR decomposition of A

matrix qr_R(matrix A)
      The upper triangular matrix in the QR decomposition of A

Cholesky Decomposition

matrix cholesky decompose(matrix A)
    The lower-triangular Cholesky factor of the symmetric positive-definite matrix A

Singular Value Decomposition

vector singular values(matrix A)
    The singular values of A in descending order


### Other functions

vector sort_asc(vector v)
    Sort the elements of v in ascending order

row_vector sort_asc(row_vector v)
     Sort the elements of v in ascending order

vector sort_desc(vector v)
    Sort the elements of v in descending order

row_vector sort_desc(row_vector v)
     Sort the elements of v in descending order

int[] sort_indices_asc(vector v)
     Return an array of indices between 1 and the size of v, sorted to index v in
     ascending order.

int[] sort_indices_asc(row_vector v)
     Return an array of indices between 1 and the size of v, sorted to index v in
     ascending order.

int[] sort_indices_desc(vector v)
     Return an array of indices between 1 and the size of v, sorted to index v in
     descending order.

int[] sort_indices_desc(row_vector v)
     Return an array of indices between 1 and the size of v, sorted to index v in
     descending order.
     
int rank(vector v, int s)
    Number of components of v less than v[s]

int rank(row_vector v, int s)
    Number of components of v less than v[s]

## Mixed Operations

matrix to_matrix(matrix m)
      Return the matrix m itself.

matrix to_matrix(vector v)
      Convert the column vector v to a size(v) by 1 matrix.

matrix to_matrix(row_vector v)
      Convert the row vector v to a 1 by size(v) matrix.

matrix to_matrix(real[,] a)
      Convert the two dimensional array a to a matrix with the same dimensions and
      indexing order.

matrix to_matrix(int[,] a)
      Convert the two dimensional array a to a matrix with the same dimensions and
      indexing order.

vector to_vector(matrix m)
      Convert the matrix m to a column vector in column-major order.

vector to_vector(vector v)
      Return the column vector v itself.

vector to_vector(row_vector v)
      Convert the row vector v to a column vector.

vector to_vector(real[] a)
      Convert the one-dimensional array a to a column vector.

vector to_vector(int[] a)
      Convert the one-dimensional integer array a to a column vector.

row_vector to_row_vector(matrix m)
    Convert the matrix m to a row vector in column-major order.

row_vector to_row_vector(vector v)
    Convert the column vector v to a row vector.

row_vector to_row_vector(row_vector v)
    Return the row vector v itself.

row_vector to_row_vector(real[] a)
    Convert the one-dimensional array a to a row vector.

row_vector to_row_vector(int[] a)
    Convert the one-dimensional array a to a row vector.

real[,] to_array_2d(matrix m)
    Convert the matrix m to a two dimensional array with the same dimensions and
    indexing order.

real[] to_array_1d(vector v)
    Convert the column vector v to a one-dimensional array.

real[] to_array_1d(row_vector v)
    Convert the row vector v to a one-dimensional array.

real[] to_array_1d(matrix m)
    Convert the matrix m to a one-dimensional array in column-major order.

real[] to_array_1d(real[...] a)
    Convert the array a (of any dimension up to 10) to a one-dimensional array in
    row-major order.

int[] to_array_1d(int[...] a)
    Convert the array a (of any dimension up to 10) to a one-dimensional array in
    row-major order.


# Discrete Distributions

## Binary Distributions

### Bernoulli Distribution

real bernoulli_log(ints y, reals theta)
    The log Bernoulli probability mass of y given chance of success theta

real bernoulli_cdf(ints y, reals theta)
    The Bernoulli cumulative distribution function of y given chance of success theta

real bernoulli_cdf log(ints y, reals theta)
    The log of the Bernoulli cumulative distribution function of y given chance of
    success theta

real bernoulli_ccdf log(ints y, reals theta)
    The log of the Bernoulli complementary cumulative distribution function of y given
    chance of success theta

int bernoulli_rng(real theta)
    Generate a Bernoulli variate with chance of success theta

### Bernoulli Distribution, Logit Parameterization

real bernoulli_logit log(ints y, reals alpha)
    The log Bernoulli probability mass of y given chance of success inv_logit(alpha)

## Bounded Discrete Distributions

### Binomial Distribution

real binomial_log(ints n, ints N, reals theta)
    The log binomial probability mass of n successes in N trials given chance of success
    theta

real binomial_cdf(ints n, ints N, reals theta)
    The binomial cumulative distribution function of n successes in N trials given chance
    of success theta

real binomial_cdf log(ints n, ints N, reals theta)
    The log of the binomial cumulative distribution function of n successes in N trials
    given chance of success theta
    
real binomial_ccdf log(ints n, ints N, reals theta)
    The log of the binomial complementary cumulative distribution function of n
    successes in N trials given chance of success theta
    
int binomial_rng(int N, real theta)
    Generate a binomial variate with N trials and chance of success theta

### Binomial Distribution, Logit Parameterization

real binomial logit log(ints n, ints N, reals alpha)
    The log binomial probability mass of n successes in N trials given logit-scaled
    chance of success alpha

### Beta-Binomial Distribution


real beta_binomial_log(ints n, ints N, reals alpha, reals beta)
    The log beta-binomial probability mass of n successes in N trials given prior success
    count (plus one) of alpha and prior failure count (plus one) of beta
    
real beta_binomial_cdf(ints n, ints N, reals alpha, reals beta)
    The beta-binomial cumulative distribution function of n successes in N trials given
    prior success count (plus one) of alpha and prior failure count (plus one) of beta
    
real beta_binomial_cdf_log(ints n, ints N, reals alpha, reals beta)
    The log of the beta-binomial cumulative distribution function of n successes in N
    trials given prior success count (plus one) of alpha and prior failure count (plus
    one) of beta

real beta binomial ccdf log(ints n, ints N, reals alpha, reals beta)
    The log of the beta-binomial complementary cumulative distribution function of n
    successes in N trials given prior success count (plus one) of alpha and prior failure
    count (plus one) of beta

int beta binomial rng(int N, real alpha, real beta)
    Generate a beta-binomial variate with N trials, prior success count (plus one) of
    alpha, and prior failure count (plus one) of beta

### Hypergeometric Distribution

real hypergeometric log(int n, int N, int a, int b)
    The log hypergeometric probability mass of n successes in N trials given total
    success count of a and total failure count of b

int hypergeometric rng(int N, real a, real b)
    Generate a hypergeometric variate with N trials, total success count of a, and total
    failure count of b

### Categorical Distribution

real categorical log(ints y, vector theta)
    The log categorical probability mass function with outcome(s) y in 1 : N given
    N -simplex distribution parameter theta.

real categorical logit log(ints y, vector beta)
    The log categorical probability mass function with outcome(s) y in 1 : N given
    log-odds of outcomes beta.

int categorical_rng(vector theta)
    Generate a categorical variate with N -simplex distribution parameter theta; may
    only be used in generated quantities block

### Ordered Logistic Distribution

real ordered logistic log(int k, real eta, vector c)
    The log ordered logistic probability mass of k given linear predictor eta and
    cutpoints c.

int ordered logistic rng(real eta, vector c)
    Generate an ordered logistic variate with linear predictor eta and cutpoints c; may
    only be used in generated quantities block

## Unbounded Discrete Distributions

### Negative Binomial Distribution

real neg binomial log(ints n, reals alpha, reals beta)
    The log negative binomial probability mass of n given shape alpha and inverse
    scale beta
    
real neg binomial cdf(ints n, reals alpha, reals beta)
    The negative binomial cumulative distribution function of n given shape alpha
    and inverse scale beta

real neg binomial cdf log(ints n, reals alpha, reals beta)
    The log of the negative binomial cumulative distribution function of n given shape
    alpha and inverse scale beta

real neg binomial ccdf log(ints n, reals alpha, reals beta)
    The log of the negative binomial complementary cumulative distribution function of
    n given shape alpha and inverse scale beta

int neg binomial rng(real alpha, real beta)
    Generate a negative binomial variate with shape alpha and inverse scale beta;
    may only be used in generated quantities block

### Negative Binomial Distribution, alternative parameterization    

real neg_binomial_2_log(ints y, reals mu, reals phi)
      The negative binomial probability mass of n given location mu and inverse scale
      phi.

real neg_binomial_2_log_log(ints y, reals eta, reals phi)
      The log negative binomial probability mass of n given log-location eta and
      inverse scale phi. This is useful for log-linear negative binomial regressions.

int neg_binomial_2_rng(real mu, real phi)
      Generate a negative binomial variate with location mu and inverse scale phi;
      may only be used in generated quantities block

int neg_binomial_2_log_rng(real eta, real phi)
      Generate a negative binomial variate with log-location eta and inverse scale
      phi; may only be used in generated quantities block

### Poisson Distribution

real poisson log(ints n, reals lambda)
    The log Poisson probability mass of n given rate lambda

real poisson cdf(ints n, reals lambda)
    The Poisson cumulative distribution function of n given rate lambda

real poisson cdf log(ints n, reals lambda)
    The log of the Poisson cumulative distribution function of n given rate lambda

real poisson ccdf log(ints n, reals lambda)
    The log of the Poisson complementary cumulative distribution function of n given
    rate lambda

int poisson rng(real lambda)
    Generate a poisson variate with rate lambda; may only be used in generated
    quantities block

### Poisson Distribution, Log Parameterization

real poisson log log(ints n, reals alpha)
    The log Poisson probability mass of n given log rate alpha

## Multivariate Discrete Distributions

### Multinomial Distribution

real multinomial log(int[] y, vector theta, int N)
    The log multinomial probability mass function with outcome array y of size K
    given the K-simplex distribution parameter theta and (implicit) total count N =
    sum(y)

vector multinomial rng(vector theta, int N)
    Generate a multinomial variate with simplex distribution parameter theta and
    (implicit) total count N ; may only be used in generated quantities block

# Continuous Distributions

## Unbounded Continuous Distributions


### Normal Distribution

real normal log(reals y, reals mu, reals sigma)
    The log of the normal density of y given location mu and scale sigma

real normal cdf(reals y, reals mu, reals sigma)
    The cumulative normal distribution of y given location mu and scale sigma

real normal cdf log(reals y, reals mu, reals sigma)
    The log of the cumulative normal distribution of y given location mu and scale
    sigma

real normal ccdf log(reals y, reals mu, reals sigma)
    The log of the complementary cumulative normal distribution of y given location
    mu and scale sigma

real normal rng(real mu, real sigma)
    Generate a normal variate with location mu and scale sigma; may only be used in
    generated quantities block


### Exponentially Modified Normal Distribution

real exp mod normal log(reals y, reals mu, reals sigma, reals lambda)
    The log of the exponentially modified normal density of y given location mu, scale
    sigma, and shape lambda
    
real exp mod normal cdf(reals y, reals mu, reals sigma, reals lambda)
    The exponentially modified normal cumulative distribution function of y given
    location mu, scale sigma, and shape lambda
    
real exp mod normal cdf log(reals y, reals mu, reals sigma, reals lambda)
    The log of the exponentially modified normal cumulative distribution function of y
    given location mu, scale sigma, and shape lambda
    
real exp mod normal ccdf log(reals y, reals mu, reals sigma, reals lambda)
    The log of the exponentially modified normal complementary cumulative distribu-
    tion function of y given location mu, scale sigma, and shape lambda

real exp mod normal rng(real mu, real sigma, real lambda)
    Generate a exponentially modified normal variate with location mu, scale sigma,
    and shape lambda; may only be used in generated quantities block

### Skew Normal Distribution

real skew normal log(reals y, reals mu, reals sigma, reals alpha)
    The log of the skew normal density of y given location mu, scale sigma, and shape
    alpha
    
real skew normal cdf(reals y, reals mu, reals sigma, reals alpha)
    The skew normal distribution function of y given location mu, scale sigma, and
    shape alpha
    
real skew normal cdf log(reals y, reals mu, reals sigma, reals alpha)
    The log of the skew normal cumulative distribution function of y given location mu,
    scale sigma, and shape alpha
    
real skew normal ccdf log(reals y, reals mu, reals sigma, reals alpha)
    The log of the skew normal complementary cumulative distribution function of y
    given location mu, scale sigma, and shape alpha

real skew normal rng(real mu, real sigma, real alpha)
    Generate a skew normal variate with location mu, scale sigma, and shape alpha;
    may only be used in generated quantities block

### Student-t Distribution

real student t log(reals y, reals nu, reals mu, reals sigma)
    The log of the Student-t density of y given degrees of freedom nu, location mu, and
    scale sigma
    
real student t cdf(reals y, reals nu, reals mu, reals sigma)
    The Student-t cumulative distribution function of y given degrees of freedom nu,
    location mu, and scale sigma
    
real student t cdf log(reals y, reals nu, reals mu, reals sigma)
    The log of the Student-t cumulative distribution function of y given degrees of
    freedom nu, location mu, and scale sigma
    
real student t ccdf log(reals y, reals nu, reals mu, reals sigma)
    The log of the Student-t complementary cumulative distribution function of y given
    degrees of freedom nu, location mu, and scale sigma

real student t rng(real nu, real mu, real sigma)
    Generate a Student-t variate with degrees of freedom nu, location mu, and scale
    sigma; may only be used in generated quantities block


### Cauchy Distribution

real cauchy log(reals y, reals mu, reals sigma)
    The log of the Cauchy density of y given location mu and scale sigma

real cauchy cdf(reals y, reals mu, reals sigma)
    The Cauchy cumulative distribution function of y given location mu and scale
    sigma
    
real cauchy cdf log(reals y, reals mu, reals sigma)
    The log of the Cauchy cumulative distribution function of y given location mu and
    scale sigma
    
real cauchy ccdf log(reals y, reals mu, reals sigma)
    The log of the Cauchy complementary cumulative distribution function of y given
    location mu and scale sigma
    
real cauchy rng(real mu, real sigma)
    Generate a Cauchy variate with location mu and scale sigma; may only be used in
    generated quantities block

### Double Exponential (Laplace) Distribution

real double exponential log(reals y, reals mu, reals sigma)
    The log of the double exponential density of y given location mu and scale sigma

real double exponential cdf(reals y, reals mu, reals sigma)
    The double exponential cumulative distribution function of y given location mu and
    scale sigma
    
real double exponential cdf log(reals y, reals mu, reals sigma)
    The log of the double exponential cumulative distribution function of y given
    location mu and scale sigma
    
real double exponential ccdf log(reals y, reals mu, reals sigma)
    The log of the double exponential complementary cumulative distribution function
    of y given location mu and scale sigma

real double exponential rng(real mu, real sigma)
    Generate a double exponential variate with location mu and scale sigma; may only
    be used in generated quantities block

### Logistic Distribution

real logistic log(reals y, reals mu, reals sigma)
    The log of the logistic density of y given location mu and scale sigma

real logistic cdf(reals y, reals mu, reals sigma)
    The logistic cumulative distribution function of y given location mu and scale
    sigma

real logistic cdf log(reals y, reals mu, reals sigma)
    The log of the logistic cumulative distribution function of y given location mu and
    scale sigma

real logistic ccdf log(reals y, reals mu, reals sigma)
    The log of the logistic complementary cumulative distribution function of y given
    location mu and scale sigma

real logistic rng(real mu, real sigma)
    Generate a logistic variate with location mu and scale sigma; may only be used in
    generated quantities block

### Gumbel Distribution


real gumbel log(reals y, reals mu, reals beta)
    The log of the gumbel density of y given location mu and scale beta

real gumbel cdf(reals y, reals mu, reals beta)
    The gumbel cumulative distribution function of y given location mu and scale beta

                                         314
real gumbel cdf log(reals y, reals mu, reals beta)
    The log of the gumbel cumulative distribution function of y given location mu and
    scale beta
    
real gumbel ccdf log(reals y, reals mu, reals beta)
    The log of the gumbel complementary cumulative distribution function of y given
    location mu and scale beta

real gumbel rng(real mu, real beta)
    Generate a gumbel variate with location mu and scale beta; may only be used in
    generated quantities block

## Positive Continuous Distributions

### Lognormal Distribution

real lognormal log(reals y, reals mu, reals sigma)
    The log of the lognormal density of y given location mu and scale sigma

real lognormal cdf(reals y, reals mu, reals sigma)
    The cumulative lognormal distribution function of y given location mu and scale
    sigma

real lognormal cdf log(reals y, reals mu, reals sigma)
    The log of the lognormal cumulative distribution fucntion of y given location mu
    and scale sigma

real lognormal ccdf log(reals y, reals mu, reals sigma)
    The log of the lognormal complementary cumulative distribution function of y given
    location mu and scale sigma

real lognormal rng(real mu, real beta)
    Generate a lognormal variate with location mu and scale sigma; may only be used
    in generated quantities block


### Chi-Square Distribution

real chi square log(reals y, reals nu)
    The log of the Chi-square density of y given degrees of freedom nu

real chi square cdf(reals y, reals nu)
    The Chi-square cumulative distribution function of y given degrees of freedom nu
    
real chi square cdf log(reals y, reals nu)
    The log of the Chi-square cumulative distribution function of y given degrees of
    freedom nu
    
real chi square ccdf log(reals y, reals nu)
    The log of the complementary Chi-square cumulative distribution function of y
    given degrees of freedom nu

real chi square rng(real nu)
    Generate a Chi-square variate with degrees of freedom nu; may only be used in
    generated quantities block

### Inverse Chi-Square Distribution

real inv chi square log(reals y, reals nu)
    The log of the inverse Chi-square density of y given degrees of freedom nu

real inv chi square cdf(reals y, reals nu)
    The inverse Chi-squared cumulative distribution function of y given degrees of
    freedom nu

real inv chi square cdf log(reals y, reals nu)
    The log of the inverse Chi-squared cumulative distribution function of y given
    degrees of freedom nu

real inv chi square ccdf log(reals y, reals nu)
    The log of the inverse Chi-squared complementary cumulative distribution function
    of y given degrees of freedom nu

real inv chi square rng(real nu)
    Generate an inverse Chi-squared variate with degrees of freedom nu; may only be
    used in generated quantities block

### Scaled Inverse Chi-Square Distribution

real scaled inv chi square log(reals y, reals nu, reals sigma)
    The log of the scaled inverse Chi-square density of y given degrees of freedom nu
    and scale sigma
    
real scaled inv chi square cdf(reals y, reals nu, reals sigma)
    The scaled inverse Chi-square cumulative distribution function of y given degrees
    of freedom nu and scale sigma
    
real scaled inv chi square cdf log(reals y, reals nu, reals sigma)
    The log of the scaled inverse Chi-square cumulative distribution function of y given
    degrees of freedom nu and scale sigma
    
real scaled inv chi square ccdf log(reals y, reals nu, reals sigma)
    The log of the scaled inverse Chi-square complementary cumulative distribution
    function of y given degrees of freedom nu and scale sigma

real scaled inv chi square rng(real nu, real sigma)
    Generate a scaled inverse Chi-squared variate with degrees of freedom nu and scale
    sigma; may only be used in generated quantities block

### Exponential Distribution

real exponential log(reals y, reals beta)
    The log of the exponential density of y given inverse scale beta

real exponential cdf(reals y, reals beta)
    The exponential cumulative distribution function of y given inverse scale beta

real exponential cdf log(reals y, reals beta)
    The log of the exponential cumulative distribution function of y given inverse scale
    beta

real exponential ccdf log(reals y, reals beta)
    The log of the exponential complementary cumulative distribution function of y
    given inverse scale beta

real exponential rng(real beta)
    Generate an exponential variate with inverse scale beta; may only be used in
    generated quantities block

### Gamma Distribution

real gamma log(reals y, reals alpha, reals beta)
    The log of the gamma density of y given shape alpha and inverse scale beta
    
real gamma cdf(reals y, reals alpha, reals beta)
    The cumulative gamma distribution function of y given shape alpha and inverse
    scale beta
    
real gamma cdf log(reals y, reals alpha, reals beta)
    The log of the cumulative gamma distribution function of y given shape alpha and
    inverse scale beta


real gamma ccdf log(reals y, reals alpha, reals beta)
    The log of the complementary cumulative gamma distribution function of y given
    shape alpha and inverse scale beta

real gamma rng(real alpha, real beta)
    Generate a gamma variate with shape alpha and inverse scale beta; may only be
    used in generated quantities block

### Inverse Gamma Distribution

real inv gamma log(reals y, reals alpha, reals beta)
    The log of the inverse gamma density of y given shape alpha and scale beta
    
real inv gamma cdf(reals y, reals alpha, reals beta)
    The inverse gamma cumulative distribution function of y given shape alpha and
    scale beta
    
real inv gamma cdf log(reals y, reals alpha, reals beta)
    The log of the inverse gamma cumulative distribution function of y given shape
    alpha and scale beta
    
real inv gamma ccdf log(reals y, reals alpha, reals beta)
    The log of the inverse gamma complementary cumulative distribution function of y
    given shape alpha and scale beta

real inv gamma rng(real alpha, real beta)
    Generate an inverse gamma variate with shape alpha and scale beta; may only
    be used in generated quantities block

### Weibull Distribution

real weibull log(reals y, reals alpha, reals sigma)
    The log of the Weibull density of y given shape alpha and scale sigma

real weibull cdf(reals y, reals alpha, reals sigma)
    The Weibull cumulative distribution function of y given shape alpha and scale
    sigma

real weibull cdf log(reals y, reals alpha, reals sigma)
    The log of the Weibull cumulative distribution function of y given shape alpha
    and scale sigma

real weibull ccdf log(reals y, reals alpha, reals sigma)
    The log of the Weibull complementary cumulative distribution function of y given
    shape alpha and scale sigma

real weibull rng(real alpha, real sigma)
    Generate a weibull variate with shape alpha and scale sigma; may only be used
    in generated quantities block

## Non-negative Continuous Distributions

### Rayleigh Distribution

real rayleigh log(reals y, reals sigma)
    The log of the Rayleigh ensity of y given scale sigma

real rayleigh cdf(real y, real sigma)
    The Rayleigh cumulative distribution of y given scale sigma

real rayleigh cdf log(real y, real sigma)
    The log of the Rayleigh cumulative distribution of y given scale sigma

real rayleigh ccdf log(real y, real sigma)
    The log of the Rayleigh complementary cumulative distribution of y given scale
    sigma

real rayleigh rng(real sigma)
    Generate a Rayleigh variate with scale sigma; may only be used in generated
    quantities block


## Positive Lower-Bounded Probabilities


### Pareto Distribution

real pareto log(reals y, reals y min, reals alpha)
    The log of the Pareto density of y given positive minimum value y min and shape
    alpha
    
real pareto cdf(reals y, reals y min, reals alpha)
    The Pareto cumulative distribution function of y given positive minimum value
    y min and shape alpha
    
real pareto cdf log(reals y, reals y min, reals alpha)
    The log of the Pareto cumulative distribution function of y given positive minimum
    value y min and shape alpha
    
real pareto ccdf log(reals y, reals y min, reals alpha)
    The log of the Pareto complementary cumulative distribution function of y given
    positive minimum value y min and shape alpha

real pareto rng(real y min, real alpha)
    Generate a Pareto variate with positive minimum value y min and shape alpha;
    may only be used in generated quantities block


## Continuous Distributions on [0, 1]


### Beta Distribution

real beta log(reals theta, reals alpha, reals beta)
    The log of the beta density of theta in [0, 1] given positive prior successes (plus
    one) alpha and prior failures (plus one) beta

real beta cdf(reals theta, reals alpha, reals beta)
    The beta cumulative distribution function of theta in [0, 1] given positive prior
    successes (plus one) alpha and prior failures (plus one) beta
    
real beta cdf log(reals theta, reals alpha, reals beta)
    The log of the beta cumulative distribution function of theta in [0, 1] given positive
    prior successes (plus one) alpha and prior failures (plus one) beta
    
real beta ccdf log(reals theta, reals alpha, reals beta)
    The log of the beta complementary cumulative distribution function of theta in
    [0, 1] given positive prior successes (plus one) alpha and prior failures (plus one)
    beta


real beta rng(real alpha, real beta)
    Generate a beta variate with positive prior successes (plus one) alpha and prior
    failures (plus one) beta; may only be used in generated quantities block

## Circular Distributions

### Von Mises Distribution

real von mises log(reals y, reals mu, reals kappa)
    The log of the von mises density of y given location mu and scale kappa

## Bounded Continuous Probabilities

### Uniform Distribution

real uniform log(reals y, reals alpha, reals beta)
    The log of the uniform density of y given lower bound alpha and upper bound
    beta

real uniform cdf(reals y, reals alpha, reals beta)
    The uniform cumulative distribution function of y given lower bound alpha and
    upper bound beta

real uniform cdf log(reals y, reals alpha, reals beta)
    The log of the uniform cumulative distribution function of y given lower bound
    alpha and upper bound beta

real uniform ccdf log(reals y, reals alpha, reals beta)
    The log of the uniform complementary cumulative distribution function of y given
    lower bound alpha and upper bound beta

real uniform rng(real alpha, real beta)
    Generate a uniform variate with lower bound alpha and upper bound beta; may
    only be used in generated quantities block

## Distributions over Unbounded Vectors

### Multivariate Normal Distribution

real multi_normal_log(vector y, vector mu, matrix Sigma)
    The log of the multivariate normal density of vector y given location mu and
    covariance matrix Sigma

vector multi normal rng(vector mu, matrix Sigma)
    Generate a multivariate normal variate with location mu and covariance matrix
    Sigma; may only be used in generated quantities block

### Multivariate Normal Distribution, Precision Parameterization

real multi_normal_prec_log(vector y, vector mu, matrix Omega)
    The log of the multivariate normal density of vector y given location mu and positive
    definite precision matrix Omega

### Multivariate Normal Distribution, Cholesky Parameterization

real multi normal cholesky log(vector y, vector mu, matrix L)
    The log of the multivariate normal density of vector y given location mu and
    lower-triangular Cholesky factor of the covariance matrix L


### Multivariate Gaussian Process Distribution    

real multi_gp_log(vector y, matrix Sigma, vector w)
      The log of the multivariate GP density of matrix y given kernel matrix Sigma
      and inverses scales w
    
### Multivariate Student-t Distribution

real multi student t log(vector y, real nu, vector mu, matrix Sigma)
    The log of the multivariate Student-t density of vector y given degrees of freedom
    nu, location mu, and scale matrix Sigma
    
vector multi student t rng(real nu, vector mu, matrix Sigma)
    Generate a multivariate Student-t variate with degrees of freedom nu, location mu,
    and scale matrix Sigma

### Gaussian Dynamic Linear Models

real gaussian dlm obs log(vector y, matrix F, matrix G, matrix V, matrix W, vector m0, matrix C0)
    The log of the density of the Gaussian Dynamic Linear model with observation
    matrix y in which rows are variables and columns are observations, design matrix F,
    transition matrix G, observation covariance matrix V, system covariance matrix W,
    and the initial state is distributed normal with mean m0 and covariance C0.
    
real gaussian dlm obs log(vector y, matrix F, matrix G, vector V, matrix W, vector m0, matrix C0)
    The log of the density of the Gaussian Dynamic Linear model with observation
    matrix y in which rows are variables and columns are observations, design matrix
    F, transition matrix G, observation covariance matrix with diagonal V, system
    covariance matrix W, and the initial state is distributed normal with mean m0 and
    covariance C0.



## Simplex Distributions

### Dirichlet Distribution

real dirichlet log(vector theta, vector alpha)
    The log of the Dirichlet density for simplex theta given prior counts (plus one)
    alpha

vector dirichlet rng(vector alpha)
    Generate a Dirichlet variate with prior counts (plus one) alpha

## Correlation Matrix Distributions

### LKJ Correlation Distribution

real lkj corr log(matrix y, real eta)
    The log of the LKJ density for the correlation matrix y given nonnegative shape
    eta.

matrix lkj corr rng(int K, real eta)
    Generate a LKJ random correlation matrix of order K with shape eta


## Covariance Matrix Distributions

### Wishart Distribution

real wishart log(matrix W, real nu, matrix Sigma)
    The log of the Wishart density for positive-definite matrix W given degrees of
    freedom nu and scale matrix Sigma

matrix wishart rng(real nu, matrix Sigma)
    Generate a Wishart variate with degrees of freedom nu and scale matrix Sigma;
    may only be used in generated quantities block


### Inverse Wishart Distribution

real inv wishart log(matrix W, real nu, matrix Sigma)
    The log of the inverse Wishart density for positive-definite matrix W given degrees
    of freedom nu and symmetric and positive-definite scale matrix matrix Sigma

matrix inv wishart rng(real nu, matrix Sigma)
    Generate an inverse Wishart variate with degrees of freedom nu and symmetric and positive-definite scale matrix matrix Sigma; may only be used in generated quantities block

### LKJ Covariance Distribution

real lkj cov log(matrix W, vector mu, vector sigma, real eta)
     The log of the LKJ density for covariance matrix W is the sum of log of the lognormal
     density of the standard deviations given location vector mu and scale vector sigma
     and the log of the lkj corr density of the correlation matrix given shape
