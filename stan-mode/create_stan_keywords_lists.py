import json
import re
import sys

_TEMPLATE = """;;; stan-keywords-lists.el -- file auto generated by keywords/create_stan_keywords_list.py

(defconst stan-language-version "{version}"
  "Stan language version supported")

(defvar stan-types-list
  {types}
  "List of Stan data types")

(defvar stan-function-return-types-list
  {return_types}
  "List of types that Stan functions can return")

(defvar stan-blocks-list
  {blocks}
  "List of Stan block names")

(defvar stan-bounds-list
  {bounds}
  "List of keywords in Stan bounds statements")

(defvar stan-keywords-list
  {keywords}
  "List of Stan keywords")

(defvar stan-functions-list
  {functions}
  "List of Stan functions")

(defvar stan-distribution-list
  {distributions}
  "List of Stan distributions")

(defvar stan-reserved-list
  {reserved}
  "List of Stan reserved keywords")

(provide 'stan-keywords-lists)
;;; stan-keywords-lists.el ends here
"""

DISTR_PARTS = ('Continuous Distributions', 'Discrete Distributions')

def sexp(x):
    return "'(\n" + '\n'.join('    "%s"' % atom for atom in x) + "\n    )"

def read_json(filename):
    with open(filename, "r") as f:
        data = json.load(f)

    keywords = sorted(data['keywords']
                      + data['pseudo_keywords']
                      + data['function_like_keywords'])
    types = sorted(data['types'])
    return_types = sorted(data['function_return_types'])
    blocks = sorted(data['blocks'])
    bounds = sorted(data['bounds'])
    re_op = re.compile("^operator")
    functions = sorted([x for x in data['functions']
                        if not re_op.match(x)
                        and x not in data['function_like_keywords']])
    distributions = sorted(data['distributions'])
    reserved = sorted([x for x in data['reserved'] + data['cpp_reserved']
                       if x not in keywords + blocks + functions
                       + distributions + types + return_types])
    return {
        'blocks': sexp(sorted(blocks)),
        'bounds': sexp(sorted(bounds)),
        'distributions': sexp(sorted(distributions)),
        'functions': sexp(sorted(functions)),
        'keywords': sexp(sorted(keywords)),
        'reserved': sexp(sorted(reserved)),
        'types': sexp(sorted(types)),
        'return_types': sexp(sorted(return_types)),
        'version': data['version']
    }

def create_code(data):
    print(_TEMPLATE.format(**data))

if __name__ == '__main__':
    create_code(read_json(sys.argv[1]))

