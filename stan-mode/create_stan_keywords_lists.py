import json
import re
import sys
import os.path

_TEMPLATE = """;;; {el_file} -- variables used by `stan-mode'

;;; Commentary:

;; DO NOT EDIT! file auto generated by {py_file}

;;; Code:

(defconst stan-language-version "{version}"
  "Stan modeling language version supported by `stan-mode'.")

(defvar stan-types-list
  {types}
  "List of data types in Stan.")

(defvar stan-function-return-types-list
  {return_types}
  "List of return types of Stan functions.")

(defvar stan-blocks-list
  {blocks}
  "List of the names of blocks in Stan.")

(defvar stan-bounds-list
  {bounds}
  "List of bounds statements in Stan.")

(defvar stan-keywords-list
  {keywords}
  "List of keywords in Stan.")

(defvar stan-functions-list
  {functions}
  "List of functions in Stan.")

(defvar stan-distribution-list
  {distributions}
  "List of distributions in Stan.")

(defvar stan-reserved-list
  {reserved}
  "List of reserved keywords in Stan.")

(provide 'stan-keywords-lists)

;;; {el_file} ends here

"""

DISTR_PARTS = ('Continuous Distributions', 'Discrete Distributions')

def sexp(x):
    return "'(\n" + '\n'.join('    "%s"' % atom for atom in x) + "\n    )"

def read_json(filename):
    with open(filename, "r") as f:
        data = json.load(f)

    keywords = sorted(data['keywords']
                      + data['pseudo_keywords']
                      + data['function_like_keywords'])
    types = sorted(data['types'])
    return_types = sorted(data['function_return_types'])
    blocks = sorted(data['blocks'])
    bounds = sorted(data['bounds'])
    re_op = re.compile("^operator")
    functions = sorted([x for x in data['functions']
                        if not re_op.match(x)
                        and x not in data['function_like_keywords']])
    distributions = sorted(data['distributions'])
    reserved = sorted([x for x in data['reserved'] + data['cpp_reserved']
                       if x not in keywords + blocks + functions
                       + distributions + types + return_types])
    return {
        'blocks' : sexp(sorted(blocks)),
        'bounds' : sexp(sorted(bounds)),
        'distributions' : sexp(sorted(distributions)),
        'functions' : sexp(sorted(functions)),
        'keywords' : sexp(sorted(keywords)),
        'reserved' : sexp(sorted(reserved)),
        'types' : sexp(sorted(types)),
        'return_types' : sexp(sorted(return_types)),
        'version' : data['version'],
        'py_file' : os.path.split(__file__)[1]
    }

def create_code(data, dst):
    data.update({'el_file' : os.path.split(dst)[1]})
    with open(dst, 'w') as f:
        f.write(_TEMPLATE.format(**data))

if __name__ == '__main__':
    create_code(read_json(sys.argv[1]), sys.argv[2])

